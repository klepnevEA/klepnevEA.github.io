{"version":3,"sources":["components/App/index.module.css","pages/MainPage/index.module.css","pages/DetailedPage/index.ts","pages/DetailedPage/DetailedPage.tsx","components/CardCity/index.ts","components/CardCity/CardCity.tsx","pages/MainPage/index.ts","pages/MainPage/MainPage.tsx","pages/Page404/index.ts","pages/Page404/Page404.tsx","components/InputSearch/index.ts","components/InputSearch/InputSearch.tsx","components/App/App.tsx","components/App/index.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","DetailedPage","list","history","useHistory","name","useParams","city","filter","item","useEffect","length","replace","pathname","Card","CardActionArea","CardContent","Typography","gutterBottom","variant","component","main","temp","humidity","visibility","clouds","all","weather","description","CardCity","to","MainPage","className","styles","map","elem","index","Page404","InputSearch","placeholder","onOutput","useState","valueInput","setValueInput","Input","onChange","e","target","value","onKeyDown","key","App","listCityes","setListCityes","search","fetch","then","response","status","json","data","cod","catch","err","console","warn","navigator","geolocation","getCurrentPosition","position","coordinates","coords","latitude","longitude","error","log","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1d0296a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3hyVf\",\"container\":\"App_container__3k7A3\",\"header\":\"App_header__2N03G\",\"header-search\":\"App_header-search__3iP4t\",\"main\":\"App_main__1i93Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list-city\":\"MainPage_list-city__2arg-\"};","import { DetailedPage } from \"./DetailedPage\";\r\n\r\nexport default DetailedPage;\r\n","import { Card, CardActionArea, CardContent, Typography } from \"@mui/material\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { TCity } from \"../../types/city\";\r\n\r\ntype TProps = {\r\n  list: TCity[];\r\n};\r\n\r\nexport const DetailedPage = ({ list }: TProps) => {\r\n  const history = useHistory();\r\n  const { name } = useParams<{ name?: string }>();\r\n  const city = [...list].filter((item: TCity) => item.name === name);\r\n\r\n  useEffect(() => {\r\n    if (list.length === 0) {\r\n      history.replace({ pathname: \"/\" });\r\n    }\r\n  }, [history, list]);\r\n\r\n  return (\r\n    <Card>\r\n      <CardActionArea>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n            Детальная информация о городе {city[0]?.name}\r\n          </Typography>\r\n          <Typography>\r\n            Температура воздуха: {city[0]?.main.temp} &deg;C\r\n          </Typography>\r\n          <Typography>Влажгность: {city[0]?.main.humidity} %</Typography>\r\n          <Typography>Видимость: {city[0]?.visibility} м</Typography>\r\n          <Typography>\r\n            Облачность:{\" \"}\r\n            {city[0]?.clouds.all < 20\r\n              ? \"Низкая\"\r\n              : city[0]?.clouds.all < 100\r\n              ? \"Средняя\"\r\n              : \"Высокая\"}\r\n          </Typography>\r\n          <Typography>Облака: {city[0]?.weather[0].description}</Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n};\r\n","import { CardCity } from \"./CardCity\";\r\n\r\nexport default CardCity;\r\n","import { Card, CardActionArea, CardContent, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TCity } from \"../../types/city\";\r\n\r\ntype TProps = {\r\n  city: TCity;\r\n};\r\n\r\nexport const CardCity = ({ city }: TProps) => {\r\n  return (\r\n    <Card>\r\n      <CardActionArea>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n            Город: {city?.name}\r\n          </Typography>\r\n          <Typography>Температура: {city?.main.temp} &deg;C</Typography>\r\n          <Typography>Влажгность: {city?.main.humidity} %</Typography>\r\n          {city?.visibility && (\r\n            <Typography>Видимость: {city?.visibility} м</Typography>\r\n          )}\r\n\r\n          <Link\r\n            to={{\r\n              pathname: `/datailed/${city?.name}`,\r\n            }}\r\n          >\r\n            Подробнее\r\n          </Link>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n};\r\n","import { MainPage } from \"./MainPage\";\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport CardCity from \"../../components/CardCity\";\r\nimport { TCity } from \"../../types/city\";\r\nimport styles from \"./index.module.css\";\r\n\r\ntype TProps = {\r\n  list: TCity[];\r\n};\r\n\r\nexport const MainPage = ({ list }: TProps) => {\r\n  return (\r\n    <>\r\n      {list.length ? (\r\n        <ul className={styles[\"list-city\"]}>\r\n          {list.map((elem: TCity, index: number) => {\r\n            return (\r\n              <li key={index}>\r\n                <CardCity city={elem} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <h2>Список городов пуст</h2>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { Page404 } from \"./Page404\";\r\n\r\nexport default Page404;\r\n","// type TProps = {\r\n//   name?: string;\r\n//   placeholder: string;\r\n// };\r\n\r\nexport const Page404 = () => {\r\n  return <div>Страница не найдена</div>;\r\n};\r\n","import { InputSearch } from \"./InputSearch\";\r\n\r\nexport default InputSearch;\r\n","import { Input } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport styles from \"./index.module.css\";\r\n\r\ntype TProps = {\r\n  name: string;\r\n  placeholder: string;\r\n  onOutput: (text: string) => string;\r\n};\r\n\r\nexport const InputSearch = ({ name, placeholder, onOutput }: TProps) => {\r\n  const [valueInput, setValueInput] = useState<string>(\"\");\r\n  return (\r\n    <div className={styles[\"input\"]}>\r\n      <div>{name}</div>\r\n      <Input\r\n        name={name}\r\n        placeholder={placeholder}\r\n        onChange={(e) => {\r\n          setValueInput(e.target.value);\r\n        }}\r\n        value={valueInput}\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            onOutput(valueInput);\r\n            setValueInput(\"\");\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport DetailedPage from \"../../pages/DetailedPage\";\nimport MainPage from \"../../pages/MainPage\";\nimport Page404 from \"../../pages/Page404\";\nimport \"../../theme/variables.css\";\nimport { TCity } from \"../../types/city\";\nimport InputSearch from \"../InputSearch\";\nimport styles from \"./index.module.css\";\n\nfunction App() {\n  const key = \"ea6da953729f4d3bf6658f2f0b28e742\";\n  const [listCityes, setListCityes] = useState<TCity[]>([]);\n  function getInfoWeather(name: string) {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${name}&appid=${key}`\n    )\n      .then((response) => {\n        if (response.status < 400) {\n          return response.json();\n        }\n      })\n      .then((data) => {\n        if (data.cod === \"404\") {\n          setListCityes([...listCityes]);\n        } else if (\n          [...listCityes].filter((item: TCity) => item.name === data.name)\n            .length === 0\n        ) {\n          setListCityes([data, ...listCityes]);\n        }\n      })\n      .catch((err) => {\n        console.warn(\"Такого города нет\");\n      });\n  }\n\n  function getInfoWeatherCoordinates(coordinates: number[]) {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/find?lat=${coordinates[0]}&lon=${\n        coordinates[1]\n      }&cnt=${50}&appid=${key}`\n    )\n      .then((response) => {\n        if (response.status < 400) {\n          return response.json();\n        }\n      })\n      .then((data) => {\n        if (data.cod === \"404\") {\n          setListCityes([...listCityes]);\n        } else if (\n          [...listCityes].filter(\n            (item: TCity) => item.name === data.list[0].name\n          ).length === 0\n        ) {\n          setListCityes([data.list[0], ...listCityes]);\n        }\n      })\n      .catch((err) => {\n        console.warn(\"Такого города нет!\");\n      });\n  }\n\n  const search = (value: string) => {\n    getInfoWeather(value);\n    return value;\n  };\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        getInfoWeatherCoordinates([\n          position.coords.latitude,\n          position.coords.longitude,\n        ]);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  };\n\n  getLocation();\n\n  return (\n    <div className={styles[\"wrapper\"]}>\n      <header className={styles[\"header\"]}>\n        <div className={styles[\"container\"]}>\n          <h1>Погода в доме</h1>\n          <div className={styles[\"header-search\"]}>\n            <InputSearch\n              name=\"Найти\"\n              placeholder=\"Введите название города\"\n              onOutput={(e) => search(e)}\n            />\n          </div>\n        </div>\n      </header>\n      <main className={styles[\"main\"]}>\n        <div className={styles[\"container\"]}>\n          <Router>\n            <Switch>\n              <Route path=\"/\" exact={true}>\n                <MainPage list={listCityes} />\n              </Route>\n              <Route path=\"/datailed/:name\">\n                <DetailedPage list={listCityes} />\n              </Route>\n              <Route>\n                <Page404 />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}